export const sampleIssues = [
  {
    id: '1',
    environment: {
      APPLICATION_ROOT: 'None',
      BODY_TIMEOUT: '60',
      DEBUG: 'False',
      ENV: 'production',
      JSONIFY_MIMETYPE: 'application/json',
      JSONIFY_PRETTYPRINT_REGULAR: 'False',
      JSON_AS_ASCII: 'True',
      JSON_SORT_KEYS: 'True',
      MAX_CONTENT_LENGTH: '16777216',
      PERMANENT_SESSION_LIFETIME: '31 days, 0:00:00',
      PREFER_SECURE_URLS: 'False',
      PROPAGATE_EXCEPTIONS: 'None',
      PYTHON_VER: '3.8.10',
      QUART_VER: '0.14.1',
      RESPONSE_TIMEOUT: '60',
      SECRET_KEY: 'None',
      SEND_FILE_MAX_AGE_DEFAULT: '12:00:00',
      SERVER_NAME: 'None',
      SESSION_COOKIE_DOMAIN: 'None',
      SESSION_COOKIE_HTTPONLY: 'True',
      SESSION_COOKIE_NAME: 'session',
      SESSION_COOKIE_PATH: 'None',
      SESSION_COOKIE_SAMESITE: 'None',
      SESSION_COOKIE_SECURE: 'False',
      SESSION_REFRESH_EACH_REQUEST: 'True',
      TEMPLATES_AUTO_RELOAD: 'None',
      TESTING: 'False',
      TRAP_HTTP_EXCEPTIONS: 'False',
    },
    error: {
      name: 'IndexError: list index out of range',
    },
    frames: [
      {
        code: '\n        if headers is not None:\n            response.headers.update(headers)  # type: ignore\n\n        return response\n\n    async def handle_request(self, request: Request) -> Response:\n        async with self.request_context(request) as request_context:\n            try:\n                return await self.full_dispatch_request(request_context)\n            except asyncio.CancelledError:\n                raise  # CancelledErrors should be handled by serving code.\n            except Exception as error:\n                return await self.handle_exception(error)\n            finally:\n                if request.scope.get("_quart._preserve_context", False):\n                    self._preserved_context = request_context.copy()\n\n    async def full_dispatch_request(\n        self, request_context: Optional[RequestContext] = None\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'return await self.full_dispatch_request(request_context)',
        line_number: 1862,
        method_name: 'handle_request',
      },
      {
        code: '                omits this argument.\n        """\n        await self.try_trigger_before_first_request_functions()\n        await request_started.send(self)\n        try:\n            result = await self.preprocess_request(request_context)\n            if result is None:\n                result = await self.dispatch_request(request_context)\n        except Exception as error:\n            result = await self.handle_user_exception(error)\n        return await self.finalize_request(result, request_context)\n\n    async def preprocess_request(\n        self, request_context: Optional[RequestContext] = None\n    ) -> Optional[ResponseReturnValue]:\n        """Preprocess the request i.e. call before_request functions.\n\n        Arguments:\n            request_context: The request context, optional as Flask\n                omits this argument.\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'result = await self.handle_user_exception(error)',
        line_number: 1887,
        method_name: 'full_dispatch_request',
      },
      {
        code: '        This should forward :class:`~quart.exception.HTTPException` to\n        :meth:`handle_http_exception`, then attempt to handle the\n        error. If it cannot it should reraise the error.\n        """\n        if isinstance(error, HTTPException) and not self.trap_http_exception(error):\n            return await self.handle_http_exception(error)\n\n        handler = self._find_exception_handler(error)\n        if handler is None:\n            raise error\n        return await handler(error)\n\n    async def handle_exception(self, error: Exception) -> Response:\n        """Handle an uncaught exception.\n\n        By default this switches the error response to a 500 internal\n        server error.\n        """\n        await got_request_exception.send(self, exception=error)\n\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'raise error',
        line_number: 1104,
        method_name: 'handle_user_exception',
      },
      {
        code: '        Arguments:\n            request_context: The request context, optional as Flask\n                omits this argument.\n        """\n        await self.try_trigger_before_first_request_functions()\n        await request_started.send(self)\n        try:\n            result = await self.preprocess_request(request_context)\n            if result is None:\n                result = await self.dispatch_request(request_context)\n        except Exception as error:\n            result = await self.handle_user_exception(error)\n        return await self.finalize_request(result, request_context)\n\n    async def preprocess_request(\n        self, request_context: Optional[RequestContext] = None\n    ) -> Optional[ResponseReturnValue]:\n        """Preprocess the request i.e. call before_request functions.\n\n        Arguments:\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'result = await self.dispatch_request(request_context)',
        line_number: 1885,
        method_name: 'full_dispatch_request',
      },
      {
        code: '        """\n        request_ = (request_context or _request_ctx_stack.top).request\n        if request_.routing_exception is not None:\n            raise request_.routing_exception\n\n        if request_.method == "OPTIONS" and request_.url_rule.provide_automatic_options:\n            return await self.make_default_options_response()\n\n        handler = self.view_functions[request_.url_rule.endpoint]\n        return await handler(**request_.view_args)\n\n    async def finalize_request(\n        self,\n        result: ResponseReturnValue,\n        request_context: Optional[RequestContext] = None,\n        from_error_handler: bool = False,\n    ) -> Response:\n        """Turns the view response return value into a response.\n\n        Arguments:\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'return await handler(**request_.view_args)',
        line_number: 1933,
        method_name: 'dispatch_request',
      },
      {
        code: "\napp = Quart(__name__)\n\nQuartError(app, api_key='dhjsdfhjjsd', server_host='http://localhost:5000').attach()\n\n\n@app.route('/')\nasync def test():\n    arr = [3, 3]\n    arr[5]\n    return 'hello world'",
        file: '/home/cameron/error-monitoring-api/sample_api.py',
        line: 'arr[5]',
        line_number: 12,
        method_name: 'test',
      },
    ],
    request: {
      args: {},
      cookies: {},
      headers: {
        Accept:
          'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        Connection: 'keep-alive',
        Host: '127.0.0.1:4000',
        'Remote-Addr': '127.0.0.1',
        'Sec-Ch-Ua': '";Not A Brand";v="99", "Chromium";v="94"',
        'Sec-Ch-Ua-Mobile': '?0',
        'Sec-Ch-Ua-Platform': '"Linux"',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
          'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36',
      },
      host: '127.0.0.1:4000',
      method: 'GET',
      path: '/',
      url: 'http://127.0.0.1:4000/',
    },
  },
  {
    id: '2',
    environment: {
      APPLICATION_ROOT: 'None',
      BODY_TIMEOUT: '60',
      DEBUG: 'False',
      ENV: 'production',
      JSONIFY_MIMETYPE: 'application/json',
      JSONIFY_PRETTYPRINT_REGULAR: 'False',
      JSON_AS_ASCII: 'True',
      JSON_SORT_KEYS: 'True',
      MAX_CONTENT_LENGTH: '16777216',
      PERMANENT_SESSION_LIFETIME: '31 days, 0:00:00',
      PREFER_SECURE_URLS: 'False',
      PROPAGATE_EXCEPTIONS: 'None',
      PYTHON_VER: '3.8.10',
      QUART_VER: '0.14.1',
      RESPONSE_TIMEOUT: '60',
      SECRET_KEY: 'None',
      SEND_FILE_MAX_AGE_DEFAULT: '12:00:00',
      SERVER_NAME: 'None',
      SESSION_COOKIE_DOMAIN: 'None',
      SESSION_COOKIE_HTTPONLY: 'True',
      SESSION_COOKIE_NAME: 'session',
      SESSION_COOKIE_PATH: 'None',
      SESSION_COOKIE_SAMESITE: 'None',
      SESSION_COOKIE_SECURE: 'False',
      SESSION_REFRESH_EACH_REQUEST: 'True',
      TEMPLATES_AUTO_RELOAD: 'None',
      TESTING: 'False',
      TRAP_HTTP_EXCEPTIONS: 'False',
    },
    error: {
      name: 'Some other error: oh no!',
    },
    frames: [
      {
        code: '\n        if headers is not None:\n            response.headers.update(headers)  # type: ignore\n\n        return response\n\n    async def handle_request(self, request: Request) -> Response:\n        async with self.request_context(request) as request_context:\n            try:\n                return await self.full_dispatch_request(request_context)\n            except asyncio.CancelledError:\n                raise  # CancelledErrors should be handled by serving code.\n            except Exception as error:\n                return await self.handle_exception(error)\n            finally:\n                if request.scope.get("_quart._preserve_context", False):\n                    self._preserved_context = request_context.copy()\n\n    async def full_dispatch_request(\n        self, request_context: Optional[RequestContext] = None\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'return await self.full_dispatch_request(request_context)',
        line_number: 1862,
        method_name: 'handle_request',
      },
      {
        code: '                omits this argument.\n        """\n        await self.try_trigger_before_first_request_functions()\n        await request_started.send(self)\n        try:\n            result = await self.preprocess_request(request_context)\n            if result is None:\n                result = await self.dispatch_request(request_context)\n        except Exception as error:\n            result = await self.handle_user_exception(error)\n        return await self.finalize_request(result, request_context)\n\n    async def preprocess_request(\n        self, request_context: Optional[RequestContext] = None\n    ) -> Optional[ResponseReturnValue]:\n        """Preprocess the request i.e. call before_request functions.\n\n        Arguments:\n            request_context: The request context, optional as Flask\n                omits this argument.\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'result = await self.handle_user_exception(error)',
        line_number: 1887,
        method_name: 'full_dispatch_request',
      },
      {
        code: '        This should forward :class:`~quart.exception.HTTPException` to\n        :meth:`handle_http_exception`, then attempt to handle the\n        error. If it cannot it should reraise the error.\n        """\n        if isinstance(error, HTTPException) and not self.trap_http_exception(error):\n            return await self.handle_http_exception(error)\n\n        handler = self._find_exception_handler(error)\n        if handler is None:\n            raise error\n        return await handler(error)\n\n    async def handle_exception(self, error: Exception) -> Response:\n        """Handle an uncaught exception.\n\n        By default this switches the error response to a 500 internal\n        server error.\n        """\n        await got_request_exception.send(self, exception=error)\n\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'raise error',
        line_number: 1104,
        method_name: 'handle_user_exception',
      },
      {
        code: '        Arguments:\n            request_context: The request context, optional as Flask\n                omits this argument.\n        """\n        await self.try_trigger_before_first_request_functions()\n        await request_started.send(self)\n        try:\n            result = await self.preprocess_request(request_context)\n            if result is None:\n                result = await self.dispatch_request(request_context)\n        except Exception as error:\n            result = await self.handle_user_exception(error)\n        return await self.finalize_request(result, request_context)\n\n    async def preprocess_request(\n        self, request_context: Optional[RequestContext] = None\n    ) -> Optional[ResponseReturnValue]:\n        """Preprocess the request i.e. call before_request functions.\n\n        Arguments:\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'result = await self.dispatch_request(request_context)',
        line_number: 1885,
        method_name: 'full_dispatch_request',
      },
      {
        code: '        """\n        request_ = (request_context or _request_ctx_stack.top).request\n        if request_.routing_exception is not None:\n            raise request_.routing_exception\n\n        if request_.method == "OPTIONS" and request_.url_rule.provide_automatic_options:\n            return await self.make_default_options_response()\n\n        handler = self.view_functions[request_.url_rule.endpoint]\n        return await handler(**request_.view_args)\n\n    async def finalize_request(\n        self,\n        result: ResponseReturnValue,\n        request_context: Optional[RequestContext] = None,\n        from_error_handler: bool = False,\n    ) -> Response:\n        """Turns the view response return value into a response.\n\n        Arguments:\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'return await handler(**request_.view_args)',
        line_number: 1933,
        method_name: 'dispatch_request',
      },
      {
        code: "\napp = Quart(__name__)\n\nQuartError(app, api_key='dhjsdfhjjsd', server_host='http://localhost:5000').attach()\n\n\n@app.route('/')\nasync def test():\n    arr = [3, 3]\n    arr[5]\n    return 'hello world'",
        file: '/home/cameron/error-monitoring-api/sample_api.py',
        line: 'arr[5]',
        line_number: 12,
        method_name: 'test',
      },
    ],
    request: {
      args: {},
      cookies: {},
      headers: {
        Accept:
          'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        Connection: 'keep-alive',
        Host: '127.0.0.1:4000',
        'Remote-Addr': '127.0.0.1',
        'Sec-Ch-Ua': '";Not A Brand";v="99", "Chromium";v="94"',
        'Sec-Ch-Ua-Mobile': '?0',
        'Sec-Ch-Ua-Platform': '"Linux"',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
          'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36',
      },
      host: '127.0.0.1:4000',
      method: 'GET',
      path: '/',
      url: 'http://127.0.0.1:4000/',
    },
  },
  {
    id: '3',
    environment: {
      APPLICATION_ROOT: 'None',
      BODY_TIMEOUT: '60',
      DEBUG: 'False',
      ENV: 'production',
      JSONIFY_MIMETYPE: 'application/json',
      JSONIFY_PRETTYPRINT_REGULAR: 'False',
      JSON_AS_ASCII: 'True',
      JSON_SORT_KEYS: 'True',
      MAX_CONTENT_LENGTH: '16777216',
      PERMANENT_SESSION_LIFETIME: '31 days, 0:00:00',
      PREFER_SECURE_URLS: 'False',
      PROPAGATE_EXCEPTIONS: 'None',
      PYTHON_VER: '3.8.10',
      QUART_VER: '0.14.1',
      RESPONSE_TIMEOUT: '60',
      SECRET_KEY: 'None',
      SEND_FILE_MAX_AGE_DEFAULT: '12:00:00',
      SERVER_NAME: 'None',
      SESSION_COOKIE_DOMAIN: 'None',
      SESSION_COOKIE_HTTPONLY: 'True',
      SESSION_COOKIE_NAME: 'session',
      SESSION_COOKIE_PATH: 'None',
      SESSION_COOKIE_SAMESITE: 'None',
      SESSION_COOKIE_SECURE: 'False',
      SESSION_REFRESH_EACH_REQUEST: 'True',
      TEMPLATES_AUTO_RELOAD: 'None',
      TESTING: 'False',
      TRAP_HTTP_EXCEPTIONS: 'False',
    },
    error: {
      name: 'No ordinary rabbit: a fearsome beast',
    },
    frames: [
      {
        code: '\n        if headers is not None:\n            response.headers.update(headers)  # type: ignore\n\n        return response\n\n    async def handle_request(self, request: Request) -> Response:\n        async with self.request_context(request) as request_context:\n            try:\n                return await self.full_dispatch_request(request_context)\n            except asyncio.CancelledError:\n                raise  # CancelledErrors should be handled by serving code.\n            except Exception as error:\n                return await self.handle_exception(error)\n            finally:\n                if request.scope.get("_quart._preserve_context", False):\n                    self._preserved_context = request_context.copy()\n\n    async def full_dispatch_request(\n        self, request_context: Optional[RequestContext] = None\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'return await self.full_dispatch_request(request_context)',
        line_number: 1862,
        method_name: 'handle_request',
      },
      {
        code: '                omits this argument.\n        """\n        await self.try_trigger_before_first_request_functions()\n        await request_started.send(self)\n        try:\n            result = await self.preprocess_request(request_context)\n            if result is None:\n                result = await self.dispatch_request(request_context)\n        except Exception as error:\n            result = await self.handle_user_exception(error)\n        return await self.finalize_request(result, request_context)\n\n    async def preprocess_request(\n        self, request_context: Optional[RequestContext] = None\n    ) -> Optional[ResponseReturnValue]:\n        """Preprocess the request i.e. call before_request functions.\n\n        Arguments:\n            request_context: The request context, optional as Flask\n                omits this argument.\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'result = await self.handle_user_exception(error)',
        line_number: 1887,
        method_name: 'full_dispatch_request',
      },
      {
        code: '        This should forward :class:`~quart.exception.HTTPException` to\n        :meth:`handle_http_exception`, then attempt to handle the\n        error. If it cannot it should reraise the error.\n        """\n        if isinstance(error, HTTPException) and not self.trap_http_exception(error):\n            return await self.handle_http_exception(error)\n\n        handler = self._find_exception_handler(error)\n        if handler is None:\n            raise error\n        return await handler(error)\n\n    async def handle_exception(self, error: Exception) -> Response:\n        """Handle an uncaught exception.\n\n        By default this switches the error response to a 500 internal\n        server error.\n        """\n        await got_request_exception.send(self, exception=error)\n\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'raise error',
        line_number: 1104,
        method_name: 'handle_user_exception',
      },
      {
        code: '        Arguments:\n            request_context: The request context, optional as Flask\n                omits this argument.\n        """\n        await self.try_trigger_before_first_request_functions()\n        await request_started.send(self)\n        try:\n            result = await self.preprocess_request(request_context)\n            if result is None:\n                result = await self.dispatch_request(request_context)\n        except Exception as error:\n            result = await self.handle_user_exception(error)\n        return await self.finalize_request(result, request_context)\n\n    async def preprocess_request(\n        self, request_context: Optional[RequestContext] = None\n    ) -> Optional[ResponseReturnValue]:\n        """Preprocess the request i.e. call before_request functions.\n\n        Arguments:\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'result = await self.dispatch_request(request_context)',
        line_number: 1885,
        method_name: 'full_dispatch_request',
      },
      {
        code: '        """\n        request_ = (request_context or _request_ctx_stack.top).request\n        if request_.routing_exception is not None:\n            raise request_.routing_exception\n\n        if request_.method == "OPTIONS" and request_.url_rule.provide_automatic_options:\n            return await self.make_default_options_response()\n\n        handler = self.view_functions[request_.url_rule.endpoint]\n        return await handler(**request_.view_args)\n\n    async def finalize_request(\n        self,\n        result: ResponseReturnValue,\n        request_context: Optional[RequestContext] = None,\n        from_error_handler: bool = False,\n    ) -> Response:\n        """Turns the view response return value into a response.\n\n        Arguments:\n',
        file: '/home/cameron/.local/lib/python3.8/site-packages/quart/app.py',
        line: 'return await handler(**request_.view_args)',
        line_number: 1933,
        method_name: 'dispatch_request',
      },
      {
        code: "\napp = Quart(__name__)\n\nQuartError(app, api_key='dhjsdfhjjsd', server_host='http://localhost:5000').attach()\n\n\n@app.route('/')\nasync def test():\n    arr = [3, 3]\n    arr[5]\n    return 'hello world'",
        file: '/home/cameron/error-monitoring-api/sample_api.py',
        line: 'arr[5]',
        line_number: 12,
        method_name: 'test',
      },
    ],
    request: {
      args: {},
      cookies: {},
      headers: {
        Accept:
          'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        Connection: 'keep-alive',
        Host: '127.0.0.1:4000',
        'Remote-Addr': '127.0.0.1',
        'Sec-Ch-Ua': '";Not A Brand";v="99", "Chromium";v="94"',
        'Sec-Ch-Ua-Mobile': '?0',
        'Sec-Ch-Ua-Platform': '"Linux"',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent':
          'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36',
      },
      host: '127.0.0.1:4000',
      method: 'GET',
      path: '/',
      url: 'http://127.0.0.1:4000/',
    },
  },
];
